Executive Summary:


Overview:

Ozzapalooza is one of the premiere music festivals in the United States. Located in and around the area of Phoenix, Arizona, this three-day long festival of music, energy, and fun brings in tens of thousands of individuals from all over the country. Many genres of music are heard, from classic rock to death metal, and many classic bands, like Rush and Slayer, perform each year to their fans. To aid and help this music festival flourish, our consulting company has offered our services in enhancing the technological backend that runs the festival. By increasing the access and management of the large amounts of data that the festival produces, we can help the staff and organizers of the festival by making the entire system easier and friendlier to work with.


Objectives:

Our consulting company has been hired by the organiziers of the Ozzapalooza to create an appropriate database system for them to keep better track of the information regarding their employees, bands, and the attendees of the festival. Our goal was to create this system so that it would be very easy to modify the information necessary to the festival, such as the scheduling of when bands are on stage to the accuracy of each band and their members. As well as creating the necessary structure for the database, we have also provided the organizers of the festival with a variety of triggers, to ensure accurate and consistent information, and functions, so that they can properly manage their employees and bands.

The outline of our proposed Database system is within this document. Each page contains a seperate part of the database system, known as an entity, as well as that entities functional dependencies, views, stored procedures, triggers, and access rights. This database system was designed for PostgreSQL 9.3.2, and it has been tested thoroughly.


Implementation notes:
	This database design has been implemented in PostgreSQL 9.3.2. The testing of the design has been thorough and will be error free by the time the system is implemented fully for the festival. To interface with this database system, it is recommended that a web front end be created in order to simplify the process of adding new information to the database. By creating a website that can accurately sell tickets and automatically add attendees and their related information to the system would be a simple, yet powerful process that can be implemented. Our company can create this web interface if your company is interested.


Known problems:

Although bands cannot be scheduled for the same starting time on the same stage, bands can be scheduled to play between the startTime and endTime of another band on the same stage.

As of now, the database manager is the only person that can add stages and bands to the database.

A zip code is associated with each person at the festival, but some people may not have a zip code or the zip code length is not enough space. This can happen if the new zip code, with 9 digits instead of 5, or if they do not have a zip code because they are not from the United States.

The number of people allowed in total for the festival is 1,000,000. If the festival were to experience major expansion, the length of the pid field would need to be changed all around the database.

If a band goes over the endTime that they were provided, there is no way to move up every other band to compensate.


Future Enhancements:

Add the ability to specify the quantity of tickets that are available. This would allow you to sell the proper amount of tickets while still staying within the maximum capacity of each stage.
	This would require a new trigger that checks before an insert into tickets sold, whether the ticket that is being sold is available.

Make the scheduling conflict manager trigger more flexible, as you should not be allowed to schedule a band to the same stage when another band is already on the stage at that time.
	As of now, it only checks if the startTimes conflict when scheduling bands.

Create more elaborate queries for creating reports, such as the total pay due to each employee and a report that shows the free time between stage performances for each stage.

Create the needed trigger to push back every band in the schedule to compensate for if a band goes over their time limit.